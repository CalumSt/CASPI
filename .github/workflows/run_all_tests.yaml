name: Run All Tests

on:
    workflow_dispatch: # lets you run a build from the UI
    push:
        branches:
            - main
            - develop
    pull_request:
        branches:
            - main

# When pushing new commits, cancel any running builds on that branch
concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true

env:
    BUILD_TYPE: Debug
    TEST_DIR: Tests
    BUILD_DIR: Tests/Builds
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    SCCACHE_GHA_ENABLED: true
    IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp

defaults:
    run:
        shell: bash

# jobs are run in parallel on different machines
# all steps run in series
jobs:
    run_tests:
        # don't double run on PRs
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
        name: ${{ matrix.name }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
            matrix:
                include:
                    - name: Linux
                      os: ubuntu-22.04
                    - name: macOS
                      os: macos-14
                      extra-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
                    - name: Windows
                      os: windows-latest

        steps:
            # Setup MSVC toolchain and developer command prompt (Windows)
            - uses: ilammy/msvc-dev-cmd@v1

            # Use clang on Linux so we don't introduce a 3rd compiler (Windows and macOS use MSVC and Clang)
            - name: Set up Clang
              if: runner.os == 'Linux'
              uses: egor-tensin/setup-clang@v1

            - name: Cache IPP (Windows)
              if: runner.os == 'Windows'
              id: cache-ipp
              uses: actions/cache@v4
              with:
                  key: ipp-v5
                  path: C:\Program Files (x86)\Intel

            - name: Install IPP (Windows)
              if: (runner.os == 'Windows') && (steps.cache-ipp.outputs.cache-hit != 'true')
              run: |
                  curl --output oneapi.exe https://registrationcenter-download.intel.com/akdlm/IRC_NAS/b4adec02-353b-4144-aa21-f2087040f316/w_ipp_oneapi_p_2021.11.0.533_offline.exe
                  ./oneapi.exe -s -x -f oneapi
                  ./oneapi/bootstrapper.exe -s -c --action install --components=intel.oneapi.win.ipp.devel --eula=accept -p=NEED_VS2022_INTEGRATION=1 --log-dir=.

            - name: Save IPP cache (even on CI fail)
              if: runner.os == 'Windows' && (steps.cache-ipp.outputs.cache-hit != 'true')
              uses: actions/cache/save@v4
              with:
                  path: C:\Program Files (x86)\Intel
                  key: ipp-v5

            - name: Install Ninja (Windows)
              if: runner.os == 'Windows'
              run: choco install ninja

            - name: Install Linux Deps
              if: runner.os == 'Linux'
              run: |
                   sudo apt-get update && sudo apt install ninja-build

            - name: Install macOS Deps
              if: ${{ matrix.name == 'macOS' }}
              run: brew install ninja osxutils

            - name: Use latest Xcode on system (macOS)
              if: ${{ matrix.name == 'macOS' }}
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest-stable

            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Cache the build
              uses: mozilla-actions/sccache-action@v0.0.5

            - name: Configure
              run: cmake -S ${{env.TEST_DIR}} -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ${{ matrix.extra-flags }} .

            - name: Build
              run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

            - name: Test
              working-directory: ${{ env.BUILD_DIR }}
              run: ctest


            - name: Upload test results (SARIF)
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: reports/report.sarif

            - name: Upload coverage report (optional)
              uses: codecov/codecov-action@v1
              with:
                  file: extras/coverage-data/coverage.info