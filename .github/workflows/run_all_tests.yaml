name: Run All Tests

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: unit_tests
  cancel-in-progress: true

env:
  BUILD_TYPE: Debug
  TEST_DIR: Tests
  BUILD_DIR: build

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release, Sanitize]
        c_compiler: [gcc, clang, cl, mingw]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: mingw
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: mingw
            build_type: Sanitize # MinGW doesn't support sanitizers well
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Clang (Windows)
        if: matrix.os == 'windows-latest' && matrix.c_compiler == 'clang'
        run: |
          echo "Clang is pre-installed on GitHub Actions Windows runners."

          - name: Set up MinGW (Windows)
            if: matrix.os == 'windows-latest' && matrix.c_compiler == 'mingw'
            run: choco install mingw --no-progress

          - name: Add MinGW to PATH
            if: matrix.os == 'windows-latest' && matrix.c_compiler == 'mingw'
            run: |
              echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH

      - name: Configure CMake
        run: |
          SANITIZER_FLAGS=""
          if [ "${{ matrix.build_type }}" = "Sanitize" ]; then
            SANITIZER_FLAGS="-DCMAKE_CXX_FLAGS='-fsanitize=address,undefined' -DCMAKE_C_FLAGS='-fsanitize=address,undefined'"
          fi
          cmake \
            -S ${{env.TEST_DIR}} \
            -B ${{ env.BUILD_DIR }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            $SANITIZER_FLAGS

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure